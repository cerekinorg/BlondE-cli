# Multi-stage Dockerfile for BlondE-CLI
# Optimized for size and security

# Stage 1: Builder
FROM python:3.10-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libmagic1 \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy dependency files
COPY requirements.txt pyproject.toml setup.py ./

# Install dependencies in a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Install BlondE-CLI
RUN pip install --no-cache-dir -e .

# Stage 2: Runtime
FROM python:3.10-slim

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libmagic1 \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 blonde && \
    mkdir -p /home/blonde/.blonde && \
    chown -R blonde:blonde /home/blonde

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Copy application code
WORKDIR /app
COPY --from=builder /build /app
RUN chown -R blonde:blonde /app

# Set up environment
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1
ENV BLONDE_HOME=/home/blonde/.blonde

# Switch to non-root user
USER blonde

# Create workspace directory
WORKDIR /workspace
VOLUME ["/workspace", "/home/blonde/.blonde"]

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD blnd --help || exit 1

# Default command
ENTRYPOINT ["blnd"]
CMD ["--help"]

# Labels for metadata
LABEL maintainer="Cerekin <support@cerekin.com>"
LABEL description="BlondE-CLI - AI-powered code assistant with memory and agentic capabilities"
LABEL version="1.0.0"
LABEL org.opencontainers.image.source="https://github.com/cerekin/blonde-cli"
LABEL org.opencontainers.image.licenses="MIT"
